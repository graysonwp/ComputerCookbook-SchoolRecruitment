<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Computer Cookbook School Recruitment</title>
    <link>https://books.grayson.top/school-recruitment/docs/database/3Redis/3.3-%E5%88%86%E5%B8%83%E5%BC%8F%E9%97%AE%E9%A2%98/</link>
    <description>Recent content on Computer Cookbook School Recruitment</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://books.grayson.top/school-recruitment/docs/database/3Redis/3.3-%E5%88%86%E5%B8%83%E5%BC%8F%E9%97%AE%E9%A2%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/database/3Redis/3.3-%E5%88%86%E5%B8%83%E5%BC%8F%E9%97%AE%E9%A2%98/3.3.1-Redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/database/3Redis/3.3-%E5%88%86%E5%B8%83%E5%BC%8F%E9%97%AE%E9%A2%98/3.3.1-Redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</guid>
      <description>Redis实现分布式锁 #  1 背景 #   我们日常在电商网站购物时经常会遇到一些高并发的场景，例如电商 APP 上经常出现的秒杀活动、限量优惠券抢购，还有去哪儿网的火车抢票系统等，这些场景有一个共同特点就是访问量激增，虽然在系统设计时会通过限流、异步、排队等方式优化，但整体的并发还是平时的数倍以上，为了避免并发问题，防止库存超卖，给用户提供一个良好的购物体验，这些系统中都会用到锁的机制。 对于单进程的并发场景，可以使用编程语言及相应的类库提供的锁，如 Java 中的Synchronized 语法以及ReentrantLock 类等，避免并发问题。 如果在分布式场景中，实现不同客户端的线程对代码和资源的同步访问，保证在多线程下处理共享数据的安全性，就需要用到分布式锁技术。   2 含义 #   分布式锁是控制分布式系统或不同系统之间共同访问共享资源的一种锁实现，如果不同的系统或同一个系统的不同主机之间共享了某个资源时，往往需要互斥来防止彼此干扰保证一致性。 一个相对安全的分布式锁，一般需要具备以下特征：  互斥性：互斥是锁的基本特征，同一时刻锁只能被一个线程持有，执行临界区操作。 超时释放：通过超时释放，可以避免死锁，防止不必要的线程等待和资源浪费。 可重入性：一个线程在持有锁的情况可以对其再次请求加锁，防止锁在线程执行完临界区操作之前释放。 高性能和高可用：加锁和释放锁的过程性能开销要尽可能的低，同时也要保证高可用，防止分布式锁意外失效。    3 实现方式 #   使用 Redis 作为分布式锁，本质上要实现的目标就是一个进程在 Redis 里面占据了一个仅有的“茅坑”，当别的进程也想来“占坑”时，发现已经有人蹲在那里了，就只好放弃或者等待稍后再试。 目前基于 Redis 实现分布式锁主要有两大类，一类是基于单机，另一类是基于多机，不管是哪种实现方式，均需实现加锁、解锁、锁超时这三个分布式锁的核心要素。  3.1 基于 Redis 单机实现的分布式 #  3.1.1 使用 SETNX 指令 #    最简单的加锁方式就是直接使用 Redis 的 SETNX 指令，该指令只有在 key 不存在的情况下，将 key 的值设置为 true，若 key 已经存在，则 SETNX 命令不做任何动作。</description>
    </item>
    
  </channel>
</rss>
