<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Computer Cookbook School Recruitment</title>
    <link>https://books.grayson.top/school-recruitment/docs/java/4NIO/</link>
    <description>Recent content on Computer Cookbook School Recruitment</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://books.grayson.top/school-recruitment/docs/java/4NIO/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/java/4NIO/4.1-%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/java/4NIO/4.1-%E6%A6%82%E8%BF%B0/</guid>
      <description>概述 #  1 简介 #   NIO 中的 N 可以理解为 Non-Blocking，是一种同步非阻塞的 I/O 模型，在 JDK 1.4 中引入了 NIO 框架，对应于 java.nio 包，提供了 Channel、Selector、Buffer 等抽象。 他支持面向缓冲的、基于通道的 I/O 操作方法，提供了与传统 I/O 模型中的 Socket 和 ServerSocket 相对应的 SocketChannel 和 ServerSocketChannel 两种不同的套接字通道实现，这两种通道都支持阻塞和非阻塞两种模式：  阻塞模式就像传统中的支持一样，比较简单，但是性能和可靠性都不好，一般用于低负载、低并发的应用程序，以此来提升开发速度和可维护性。 非阻塞模式正好与之相反，一般用于高负载、高并发的（网络）应用，以此来提升高性能和可靠性。    2 BIO、NIO、AIO 的区别 #   底层原理可参考 五种 IO 模型，下面介绍的主要是 Java 中 BIO、NIO、AIO 的区别。
 2.1 BIO 是阻塞的，NIO 是非阻塞的 #   BIO 的各种流是阻塞的，这就意味着，当一个线程调用 read() 或 write() 时，该线程被阻塞，直到有一些数据被读取，或数据完全写入，在此期间，该线程不能再干其他任何事，因此在任何时候都可能有大量的线程处于休眠状态，只是等待输入或者输出就绪，这可以算为对资源的一种浪费， NIO 使我们可以进行非阻塞IO 操作，比如说，单线程从通道读取数据到 Buffer，同时可以继续做别的事，当数据读取到 Buffer 中后，线程再进行处理数据，写数据也是一样的，一个线程请求写入一些数据到某通道，但不需要等待他完全写入，这个线程可以同时去做别的事情，这样可以提高线程的利用效率。  2.</description>
    </item>
    
  </channel>
</rss>
