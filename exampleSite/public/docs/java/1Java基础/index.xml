<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Computer Cookbook School Recruitment</title>
    <link>https://books.grayson.top/school-recruitment/docs/java/1Java%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content on Computer Cookbook School Recruitment</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://books.grayson.top/school-recruitment/docs/java/1Java%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/java/1Java%E5%9F%BA%E7%A1%80/1.1-StringStringBuffer%E5%92%8CStringBuilder%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/java/1Java%E5%9F%BA%E7%A1%80/1.1-StringStringBuffer%E5%92%8CStringBuilder%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>String、StringBuffer和StringBuilder的区别 #  1 各自的特点 #  1.1 String #    在 Java中字符串属于对象，Java提供了 String类来创建和操作字符串。
  String的值是不可变的，这就导致每次对 String的操作都会生成新的 String对象，这样不仅效率低下，而且大量浪费有限的内存空间，下图是对 String操作时内存变化的图：
  我们可以看到，初始String值是hello，然后在这个字符串后面加上新的字符串world，这个过程是需要在堆内存中开辟内存空间的，最终得到了hello world字符串也需要开辟相应的内存空间。 这样短短的两个字符串，却要开辟三次内存空间，这是对内存空间的极大浪费。    1.2 StringBuffer和StringBuilder #    StringBuffer始于Java 1.0，StringBuilder始于Java 1.5。 StringBuffer的所有方法都是同步（Synchronized）的，因此它是线程安全的，这就导致相比于StringBuilder，它在性能上会差一点；StringBuilder的方法不是同步的（Non-Synchronized），因此它是线程不安全的，因此相比于StringBuffer，他在性能上会好一点。 由于StringBuilder相较于StringBuffer有速度优势，所以大多数情况下建议使用 StringBuilder类，然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer类。  2 三者的区别 #    字符串修改上的区别：
 String： 不可变字符串。 StringBuffer： 可变字符串，效率低，线程安全。 StringBuilder： 可变字符串，效率高，线程不安全。    初始化上的区别：
 String： 可以赋空值。 StringBuffer和StringBuilder： 不能赋空值。  ①String String s = null; String s = “abc”; ②StringBuffer StringBuffer s = null; //结果警告：Null pointer access: The variable result can only be null at this location StringBuffer s = new StringBuffer();//StringBuffer对象是一个空的对象 StringBuffer s = new StringBuffer(“abc”);//创建带有内容的StringBuffer对象,对象的内容就是字符串”   3 建议 #   如果要操作少量的数据用String。 多线程字符串缓冲区下操作大量数据用StringBuffer。 单线程字符串缓冲区下操作大量数据用StringBuilder。  4 参考文献 #    String vs StringBuffer vs StringBuilder。  图析:String,StringBuffer与StringBuilder的区别。  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/java/1Java%E5%9F%BA%E7%A1%80/1.2-HashMap%E5%92%8CConcurrentHashMap%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/java/1Java%E5%9F%BA%E7%A1%80/1.2-HashMap%E5%92%8CConcurrentHashMap%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</guid>
      <description>HashMap和ConcurrentHashMap实现原理 #  1 HashMap #  1.1 简介 #   Java 为数据结构中的映射定义了一个接口java.util.Map，此接口主要有四个常用的实现类，分别是HashMap、HashTable、LinkedHashMap和TreeMap，类继承关系如下图所示：  下面针对各个实现类的特点做一些说明：  HashMap：  根据键的 hashCode 值存储数据，大多数情况下可以直接定位到他的值，因而具有很快的访问速度，但遍历顺序却是不确定的。 最多只允许一条记录的键为 null，允许多条记录为 null。 非线程安全，任一时刻可以有多个线程同时写 HashMap，可能会导致数据的不一致。 如果需要满足线程安全，可以用 Collections 的 synchronizedMap() 方法（该方法也是使用一个全局锁来同步多个线程间的并发访问）使 HashMap 具有线程安全能力，或者使用 ConcurrentHashMap。   HashTable：  HashTable 是遗留类，很多映射的常用功能与 HashMap 类似，不同的是他继承自 Dictionary 类，并且是线程安全的：  HashTable线程安全的策略实现代价比较大，简单粗暴，get/put所有相关的操作都是 synchronized 的，这相当于给整个哈希表加了一把大锁，多线程访问的时候，只要有一个线程访问或操作该对象，那其他线程只能阻塞，相当于将所有的操作串行化，在竞争激烈的并发场景中性能就会非常差。    HashTable 不建议在新代码中使用，不需要线程安全的场合可以用 HashMap 替换，需要线程安全的场合可以用 ConcurrentHashMap 替换，因为ConcurrentHashMap 采用了分段锁，并发性比 HashTable 要高很多，具体可参考 2.1 实现原理。    LinkedHashMap：  LinkedHashMap 是 HashMap 的一个子类，保存了记录的插入顺序，在用 Iterator 遍历 LinkedHashMap 时，先得到的记录肯定是先插入的，也可以在构造时带参数，按照访问次序排序。   TreeMap：  TreeMap 实现了 SortedMap 接口，能够把保存的记录根据键排序，默认是按键值的升序排序，也可以指定排序的比较器，当用 Iterator 遍历 TreeMap 时，得到的记录是排过序的，如果使用排序的映射，建议使用 TreeMap。 在使用 TreeMap 时，key必须实现 Comparable 接口，或者在构造 TreeMap 传入自定义的 Comparator，否则会在运行时抛出 java.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/java/1Java%E5%9F%BA%E7%A1%80/1.3-ArrayList%E5%92%8CLinkedList%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/java/1Java%E5%9F%BA%E7%A1%80/1.3-ArrayList%E5%92%8CLinkedList%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</guid>
      <description>ArrayList和LinkedList实现原理 #   如无特殊说明，下面内容的叙述基于的 JDK 版本为 JDK 1.8.0_181。
 1 ArrayList #  1.1 概述 #   ArrayList 的底层数据结构是数组，虽然对于用户来说 ArrayList 是个动态的数组，但是实际上底层是个定长数组，只是在必要的时候，对底层的数组进行扩容，每次扩容 1.5 倍，但是扩容、删除都是有代价的，极端情况下，需要将大量的元素进行移位。 ArrayList不是线程安全的，只能在单线程环境下使用，多线程环境下可以考虑用 Collections.synchronizedList(List&amp;lt;T&amp;gt; list) 返回一个线程安全的 ArrayList 类，也可以使用 concurrent 并发包下的 CopyOnWriteArrayList 类。 ArrayList实现了 Serializable 接口，因此他支持序列化，能够通过序列化传输，实现了 RandomAccess 接口，支持快速随机访问，实际上就是通过下标序号进行快速访问，实现了 Cloneable 接口，能被克隆。  1.2 实现原理 #  1.2.1 构造函数 #  ArrayList 的构造函数一共有三种，分别是无参构造、传入一个整数、传入一个集合。
1.2.1.1 无参构造 #    ArrayList 的无参构造函数源码如下：
transient Object[] elementData; private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {}; public ArrayList() { this.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/java/1Java%E5%9F%BA%E7%A1%80/1.4-%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/java/1Java%E5%9F%BA%E7%A1%80/1.4-%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</guid>
      <description>深拷贝与浅拷贝 #  1 数据类型 #  1.1 分类 #  Java 中的数据类型可以分为两大类，分别是基本类型和引用类型。
1.1.1 基本类型 #  Java 中基本类型一共是四类八种，具体如下：
 整型：byte、short、int、long。 浮点类型：float、double。 字符型：char。 逻辑型：boolean。  1.1.2 引用类型 #  除了上面四类八种基本类型外，其他的都是引用类型，包括数组。
1.2 区别 #   基本类型的变量保存原始值，即他代表的值就是数值本身；而引用类型的变量保存引用值，引用值指向内存空间的地址，代表了某个对象的引用，而不是对象本身。 基本类型在声明时系统就给他分配了内存空间，引用类型在声明时只给变量分配了引用空间，而没有分配数据空间。 具体示例如下：   声明一个基本数据类型 int1 并赋值：
int int1 = 100;    声明一个基本数据类型 int2，并赋值为 int1，对于基本数据类型来说，赋值（=号）就相当于拷贝了一份值，把 int1 的值 100，拷贝给 int2。：
int int2 = int1;    将 int1 的值修改为 500：
int1 = 500;    此时，分别打印 int1、int2 的值，会输出为 500、100。</description>
    </item>
    
  </channel>
</rss>
