<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Computer Cookbook School Recruitment</title>
    <link>https://books.grayson.top/school-recruitment/docs/database/1%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/1.6-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
    <description>Recent content on Computer Cookbook School Recruitment</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://books.grayson.top/school-recruitment/docs/database/1%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/1.6-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/database/1%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/1.6-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.6.1-%E4%B8%89%E8%8C%83%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/database/1%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/1.6-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.6.1-%E4%B8%89%E8%8C%83%E5%BC%8F/</guid>
      <description>三范式 #  数据库的设计范式是数据库设计所需要满足的规范，满足这些规范的数据库是简洁的、结构明确的，同时不会发生插入（insert）、删除（delete）、和更新（update）操作异常。
1 第一范式（1NF） #  1.1 含义 #   符合 1NF 的关系中每个属性都不可再分。 1NF 是所有关系型数据库的最基本要求。  1.2 示例 #   下图所示的表就不符合 1NF 的要求：  为了满足 1NF 的要求，上面的表应该改为下图的形式：   1.3 存在的问题 #  如果仅仅符合 1NF 的设计，仍然会存在数据冗余过大、插入异常、删除异常、修改异常的问题，例如对于下图中表的设计：
  数据冗余过大：  每一名学生的学号、姓名、系名、系主任这些数据重复多次。 每个系与对应的系主任的数据也重复多次。   插入异常：  假如学校新建了一个系，但是暂时还没有招收任何学生（比如 3 月份就新建了，但要等到 8 月份才招生），那么是无法将系名与系主任的数据单独地添加到数据表中去的。   删除异常：  假如将某个系中所有学生相关的记录都删除，那么所有系与系主任的数据也就随之消失了（一个系所有学生都没有了，并不表示这个系就没有了）。   修改异常：  假如李小明转系到法律系，那么为了保证数据库中数据的一致性，需要修改三条记录中系与系主任的数据。    2 第二范式（2NF） #   正因为仅符合 1NF 的数据库设计存在着上面提到的那些问题，我们需要提高设计标准，去掉导致上述四种问题的因素，使其符合更高一级的范式（2NF），这就是所谓的“规范化”。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/database/1%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/1.6-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.6.2-%E5%A4%9A%E8%A1%A8%E8%BF%9E%E6%8E%A5%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/database/1%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/1.6-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.6.2-%E5%A4%9A%E8%A1%A8%E8%BF%9E%E6%8E%A5%E6%96%B9%E5%BC%8F/</guid>
      <description>多表连接方式 #  1 实验表 #  1.1 学生表 #  -- ---------------------------- -- Table structure for student -- ---------------------------- DROP TABLE IF EXISTS `student`; CREATE TABLE `student` ( `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(255) COLLATE utf8_bin DEFAULT NULL, `sex` varchar(255) COLLATE utf8_bin DEFAULT NULL, `age` int(11) DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COLLATE=utf8_bin; -- ---------------------------- -- Records of student -- ---------------------------- BEGIN; INSERT INTO `student` VALUES (1, &amp;#39;小强&amp;#39;, &amp;#39;男&amp;#39;, 8); INSERT INTO `student` VALUES (2, &amp;#39;小花&amp;#39;, &amp;#39;女&amp;#39;, 5); INSERT INTO `student` VALUES (3, &amp;#39;小名&amp;#39;, &amp;#39;女&amp;#39;, 6); INSERT INTO `student` VALUES (4, &amp;#39;小五&amp;#39;, &amp;#39;女&amp;#39;, 6); INSERT INTO `student` VALUES (5, &amp;#39;小星&amp;#39;, &amp;#39;男&amp;#39;, 30); COMMIT; 1.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/database/1%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/1.6-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.6.3-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/database/1%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/1.6-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.6.3-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</guid>
      <description>存储过程 #  1 含义 #   存储过程是在数据库中定义一些完成特定功能的 SQL 语句的集合，经过编译后存储在数据库中。 存储过程可以包含流程控制语句以及各种 SQL 语句，他可以接受参数、输出参数。  2 优缺点 #  2.1 优点 #  在 MySQL 中使用存储过程，而不是用存储在客户端计算机本地的 SQL 程序，相比有以下几点优点：
 增强了 SQL 语言的功能和灵活性：  存储过程可以使用流程控制语句编写，有很强的的灵活性，可以完成复杂的判断和较复杂的计算。   允许标准组件式变成：  存储过程被创建后，可以在程序中被多次调用，而不用重新编写该存储过程的SQL语句。 数据库专业人员可以随时对存储过程进行修改，对应用程序代码毫无影响。   能实现较快的执行速度：  如果某一操作包含大量的SQL代码或被分多次执行，那么存储过程要比批处理的执行速度快很多，因为存储过程是预编译的，在首次运行一个存储过程时，查询优化器会对其进行分析优化，并且给出最终被存储在系统表中的执行计划，而批处理的SQL语句在每次运行时都要进行编译和优化，速度相对较慢。   减少网络流量：  针对同一数据库对象的操作（比如查询、修改），如果这一操作所涉及的SQL语句被组织成存储过程，那么当在客户计算机上调用该存储过程时，网络中传送的只是该调用语句，从而大大减少了网络流量并降低了网络负载。   可被当做一种安全机制来充分利用：  系统管理员通过对执行某一存储过程的权限进行限制，进而实现对响应数据的访问权限的限制，避免了非授权用户对数据的访问。    2.2 缺点 #   可移植性差： 存储过程将应用程序绑定到了数据库上。 开发调试复杂： 没有好的IDE。 修改复杂： 需要重新编译，有时候还需要更新程序中的代码以更新调用。  参考文献 #    什么是存储过程？有哪些优缺点？  数据库原理之存储过程和函数。  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/database/1%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/1.6-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.6.4-DELETETRUNCATE%E5%92%8CDROP%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/database/1%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/1.6-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.6.4-DELETETRUNCATE%E5%92%8CDROP%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>DELETE、TRUNCATE和DROP的区别 #  1 DELETE #   操作可以针对 table，也可以针对 view。 仅删除表中的数据。 数据库操作语言（DML），删除时是每次从表中删除一行，所以会很慢，操作会放到rollback segment，并且会将其作为事务记录在日志中保存以便进行回滚操作，事务提交之后才生效。 如果有相应的触发器，执行的时候会被触发。 不会减少表或索引所占用的空间。  2 TRUNCATE #   只能针对 table。 删除表中的所有行，但表结构、列、约束、索引等保持不变，新行标识所用的计数值重置为该列的种子。 数据库定义语言（DDL），操作立即生效，原数据不放到 rollback segment中，不能回滚。 操作不能触发触发器。 会将表和索引所占用的空间恢复到初始大小。 通过释放存储表数据所用的数据页来删除数据，并且只在事务日志中记录页的释放。 不能对以下表使用truncate：  由 FOREIGN KEY约束引用的表。 参与索引视图的表。 通过使用事务复制或合并复制发布的表。    3 DROP #   只能针对 table。 删除表结构、列、约束、触发器、索引，依赖于该表的存储过程和函数将被保留，但是会变为 invalid状态。 数据库定义语言（DDL），操作立即生效，原数据不放到 rollback segment中，不能回滚。 操作不能触发触发器。 会将表占用的空间全释放掉。  参考文献 #    Drop/Delete/Truncate的区别？  SQL中drop、truncate和delete的区别。  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/database/1%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/1.6-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.6.5-%E8%A7%A6%E5%8F%91%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/database/1%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/1.6-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.6.5-%E8%A7%A6%E5%8F%91%E5%99%A8/</guid>
      <description>触发器 #  1 含义 #   触发器是与表有关的数据库对象，在满足定义条件时触发，并执行触发器中定义的语句集合。 触发器在数据库中以独立的对象存储，用于保证数据完整性（比如在写入数据表前，强制检验或转换数据）。 触发器只能创建在永久表上，不能对临时表创建触发器。 MySQL的触发器是针对每一行执行，比如向一张表中插入500条数据，就会触发500次触发器。 MySQL中定义了NEW和OLD用来表示触发器所在表中触发了触发器的那一行数据：  NEW表示新数据，OLD表示旧数据。 NEW可以在触发器中使用 SET赋值，这样不会再次触发触发器，而OLD是只读的。    2 四要素 #   监视地点：TABLE。 监视事件：INSERT、UPDATE、DELETE。 触发时间：AFTER、BEFORE。 触发事件：INSERT、UPDATE、DELETE。  3 注意事项 #   因为在MySQL中触发器是针对行的，因此对于增、删、改非常频繁的表上切记不要使用触发器，因为他会非常消耗资源。  4 相关操作 #  4.1 创建触发器 #  4.1.1 基本语法 #  CREATE [DEFINER = { user | CURRENT_USER }] TRIGGER trigger_name trigger_time trigger_event ON tbl_name FOR EACH ROW [trigger_order] trigger_body trigger_time: { BEFORE | AFTER } trigger_event: { INSERT | UPDATE | DELETE } trigger_order: { FOLLOWS | PRECEDES } other_trigger_name  BEFORE和AFTER参数指定了触发执行的时间，在事件之前还是事件之后。 FOR EACH ROW表示任何一条记录上的操作满足触发事件都会触发该触发器，也就是说触发器的触发频率是针对每一行数据触发一次。 trigger_event：  INSERT型触发器：插入某一行时触发触发器，可能通过INSERT、LOAD DATA、REPLACE语句触发（LOAD DATA语句用于将一个文件装入到一个数据表中，相当于一系列的INSERT操作）。 UPDATE型触发器：更改某一行时触发触发器，可能通过UPDATE语句触发。 DELETE型触发器：删除某一行时触发触发器，可能通过DELETE、REPLACE语句触发。   trigger_order：MySQL 5.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/database/1%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/1.6-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.6.6-%E8%A7%86%E5%9B%BE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/database/1%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/1.6-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.6.6-%E8%A7%86%E5%9B%BE/</guid>
      <description>视图 #  1 含义 #   视图是一种虚拟存在的逻辑表，本身并不包含数据，只是作为一个 select 语句保存在数据字典中。 视图数据来自定义视图的查询中使用的表，使用视图动态生成，因此基表数据发生了改变时，视图也会跟着改变，同时对视图数据的修改也会影响基表的数据。  2 优点 #   简单： 使用视图的用户完全不需要关心后面对应的表结构、关联条件和筛选条件，对用户来说已经是过滤好的复合条件的结果集。 安全： 使用视图的用户只能访问他们被允许查询的结果集，对表的权限管理并不能限制到某个行某个列，但是通过视图就可以简单实现。 数据独立： 一旦视图的结构定了，可以屏蔽表结构变化对用户的影响，源表增加列对视图没有影响，源表修改列名，则可以通过修改视图来解决，不会造成对访问者的影响。  3 相关操作 #  3.1 创建视图 #  3.1.1 语法 #  -- 创建视图 CREATE VIWE 视图名称 AS SQL 语句 -- 完整 CREATE [OR REPLACE] [ALGORITHM = {UNDEFINED|MERGE|TEMPTABLE}] VIEW view_name [(column_list)] AS select_statement [WITH [CASCADED|LOCAL] CHECK OPTION] 3.1.2 注意事项 #   创建视图需要 CREATE VIEW 的权限，并且对于查询涉及的列有 SELECT 权限，如果使用 CREATE OR REPLACE 或者 ALTER 修改视图，那么还需要该视图的 DROP 权限。 OR REPLACE：在视图存在的情况下可对视图进行修改，视图不存在的情况下可创建视图。 ALGORITHM：表示视图选择算法：  MERGE：  将引用视图语句的文本与视图定义合并起来，使得视图定义的某一部分取代语句的对应部分。   假设有如下视图定义语句：</description>
    </item>
    
  </channel>
</rss>
