<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Computer Cookbook School Recruitment</title>
    <link>https://books.grayson.top/school-recruitment/docs/database/3Redis/3.1-%E6%A6%82%E8%BF%B0/</link>
    <description>Recent content on Computer Cookbook School Recruitment</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://books.grayson.top/school-recruitment/docs/database/3Redis/3.1-%E6%A6%82%E8%BF%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/database/3Redis/3.1-%E6%A6%82%E8%BF%B0/3.1.1-%E4%B8%BA%E4%BB%80%E4%B9%88Redis%E5%8D%95%E7%BA%BF%E7%A8%8B%E8%BF%98%E8%BF%99%E4%B9%88%E5%BF%AB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/database/3Redis/3.1-%E6%A6%82%E8%BF%B0/3.1.1-%E4%B8%BA%E4%BB%80%E4%B9%88Redis%E5%8D%95%E7%BA%BF%E7%A8%8B%E8%BF%98%E8%BF%99%E4%B9%88%E5%BF%AB/</guid>
      <description>为什么Redis单线程还这么快 #   严格来说，Redis Server是多线程的，只是他的请求处理整个流程是单线程处理的，我们平时所说的Redis单线程快是指他的请求处理过程非常地快。
 Redis的性能非常之高，每秒可以承受10W+的QPS，他如此优秀的性能主要取决于一下几个方面：
 纯内存操作。 使用I/O多路复用技术。 非CPU密集型任务。 单线程的优势。 多线程优化。  1 纯内存操作 #   Redis是一个内存数据库，他的数据都存储在内存中，这意味着我们读写数据都是在内存中完成，这个速度是非常快的。 Redis是一个KV内存数据库，他内部构建了一个哈希表，根据指定的Key访问时，只需要$O(1)$的时间复杂度就可以找到对应的数据，同时，Redis提供了丰富的 数据类型，并使用高效的操作方式进行操作，这些操作都在内存中进行，并不会大量消耗CPU资源，所以速度极快。  2 使用IO多路复用技术 #   为什么Redis中要使用I/O多路复用这种技术呢？
这是因为Redis是跑在单线程中的，所有的操作都是按照顺序线性执行的，但是由于读写操作等待用户输入或输出都是阻塞的，所以I/O操作在一般情况下往往不能直接返回，这会导致某一文件的I/O阻塞导致整个进程无法对其他客户提供服务，而I/O多路复用就是为了解决这个问题而出现的。
  Redis采用了 IO多路复用技术和 非阻塞IO，这个技术由操作系统实现提供，Redis可以方便地操作系统的API。 Redis可以在单线程中监听多个Socket的请求，在任意一个Socket可读/可写时，Redis去读取客户端请求，在内存中操作对应的数据，然后再写会到Socket中，整个过程非常高效，Redis利用了IO多路复用技术的 事件驱动模型，保证在监听多个Socket连接的情况下，只针对有活动的Socket采取反应。  3 非CPU密集型任务 #   采用单线程的缺点很明显，无法使用多核CPU，但是由于Redis的大部分操作并不是CPU密集型任务，Redis的瓶颈在于内存和网络带宽，因此在高并发请求下，Redis需要更多的内存和更高的网络带宽，否则瓶颈很容易出现在内存不够用和网络延迟等待的情况。 如果我们觉得单个Redis实例的性能不足以支撑业务，Redis作者推荐部署多个Redis节点，组成集群的方式来利用多核CPU的能力，而不是在单个实例上使用哪个多线程来处理。  4 单线程优势 #   基于以上特性，Redis采用单线程已足够达到非常高的性能，所以Redis没有采用多线程模型。 单线程模型带来了以下好处：  没有了多线程上下文切换的性能损耗。 没有了访问共享资源加锁的性能损耗。 开发和调试非常友好，可维护性高。   单线程模型同时也具有缺点，最大的缺点是如果前一个请求发生耗时比较久的操作，那么整个Redis就会阻塞住，其他请求也无法进来，直到这个耗时久的操作处理完成并返回，其他请求才能被处理到，我们平时遇到Redis变慢或长时间阻塞的问题，90%也都是因为Redis处理请求是单线程这个原因导致的，所以我们平时在使用Redis时，一定要避免非常耗时的操作，例如使用时间复杂度过高的方式获取数据、一次性获取过多的数据、大量key集中 过期导致Redis 淘汰key压力变大等等，这些场景都会阻塞住整个处理线程，知道他们处理完成，势必会影响业务的访问。  5 多线程优化 #   Redis Server本身是多线程的，除了请求处理流程是单线程处理之外，Redis还有其他工作线程在后台执行，他负责异步执行某些比较耗时的任务，例如 AOF每秒刷盘、 AOF文件重写都是在另一个线程中完成的。 在Redis 4.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/database/3Redis/3.1-%E6%A6%82%E8%BF%B0/3.1.2-Redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/database/3Redis/3.1-%E6%A6%82%E8%BF%B0/3.1.2-Redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>Redis数据类型 #   如无特殊说明，本文内容针对的 Redis 版本为 3.0.0，源码下载地址为 redis-3.0.0。
 1 前言 #    Redis 的 key 是顶层模型，他的 value 是扁平化的，所有的 value 都是一个 object，它的结构如下：
typedef struct redisObject { unsigned [type] 4; unsigned [encoding] 4; unsigned [lru] REDIS_LRU_BITS; int refcount; void *ptr; } robj;   上面的几个字段的意义如下：
 type：数据类型，就是我们熟悉的string、hash、list 等。 encoding：内部编码，其实就是数据结构，指的是当前这个 value 底层是用的什么数据结构，因为同一个数据类型底层也有多种数据结构的实现，所以这里需要指定数据结构。 REDIS_LRU_BITS：当前对象可以保留的时长。 refcount：对象引用计数，用于 GC。 ptr：指针，指向以 encoding 的方式实现这个对象的实际地址。    整个 Redis 的数据结构组织如下图所示：
   2 数据类型 #  Redis 中主要有 5 种数据类型，分别是字符串（String）、列表（List）、集合（Set）、有序集合（ZSet）、哈希（Hash）。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/database/3Redis/3.1-%E6%A6%82%E8%BF%B0/3.1.3-%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/database/3Redis/3.1-%E6%A6%82%E8%BF%B0/3.1.3-%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6/</guid>
      <description>持久化机制 #  1 什么是持久化 #   持久化就是把内存的数据写到磁盘中去，防止服务宕机了内存数据丢失。  2 Redis 中持久化机制有哪些 #  Redis 中持久化机制主要有两种，分别是RDB（默认）和AOF。
2.1 RDB #  2.1.1 含义 #   RDB 文件主要用于保存和还原 Redis 服务器所有数据库中的所有键值对数据。 创建方式主要有两种，分别是 SAVE 和 BGSAVE：  SAVE 命令由服务器进程直接执行保存操作，所以该命令会阻塞服务器。 BGSAVE 命令由子进程执行保存操作，所以该命令不会阻塞服务器。   因为 BGSAVE 命令可以在不阻塞服务器进程的情况下执行，所以可以通过设置服务器配置的 save 选项，让服务器每隔一段时间自动执行一次 BGSAVE 命令，用户可以通过 save 选项设置多个保存条件，但只要其中任意一个条件被满足，服务器就会执行 BGSAVE 命令。  2.1.2 优缺点 #  2.1.2.1 优点 #   整个 Redis 数据库只包含一个文件，这对于文件备份来说非常方便，比如，我们可能打算每个小时归档一次最近 24 小时的数据，同时还要每天归档一次最近 30 天的数据，通过这样的备份策略，一旦系统出现灾难性故障，我们可以非常容易的进行恢复。 对于灾难性恢复而言，RDB 也是一个不错的选择，因为我们可以非常轻松的将一个单独的文件压缩后再转移到其他存储介质上。 性能最大化，对于 Redis 的服务进程而言，在开始持久化时，他唯一需要做的只是 fork 出子进程，之后再由子进程完成这些持久化的工作，这样可以极大地避免服务进程执行 IO 操作。 相比于 AOF 机制，如果数据集很大，RDB 的启动效率会更高。  2.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/database/3Redis/3.1-%E6%A6%82%E8%BF%B0/3.1.4-%E8%BF%87%E6%9C%9F%E6%9C%BA%E5%88%B6%E5%92%8C%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/database/3Redis/3.1-%E6%A6%82%E8%BF%B0/3.1.4-%E8%BF%87%E6%9C%9F%E6%9C%BA%E5%88%B6%E5%92%8C%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5/</guid>
      <description>过期机制和内存淘汰策略 #  1 过期机制 #  1.1 设置键的生存时间或过期时间 #  1.1.1 设置过期时间 #   Redis 中有四个不同的命令可以用于设置键的生存时间（键可以存在多久）或过期时间（键什么时候被删除）：  EXPIRE &amp;lt;key&amp;gt; &amp;lt;ttl&amp;gt;：命令用于将键 key 的生存时间设置为 ttl 秒。 PEXPIRE &amp;lt;key&amp;gt; &amp;lt;ttl&amp;gt;：命令用于将 键 key 的生存时间设置为 ttl 毫秒。 EXPIREAT &amp;lt;key&amp;gt; &amp;lt;timestamp&amp;gt;：命令用于将键 key 的过期时间设置为 timestamp 所指定的秒数时间戳。 PEXPIREAT &amp;lt;key&amp;gt; &amp;lt;timestamp&amp;gt;：命令用于将键 key 的过期时间设置为 timestamp 所指定的毫秒数时间戳。   虽然有多种不同单位和不同形式的设置命令，但实际上EXPIRE、PEXPIRE、EXPIREAT三个命令都是使用 PEXIREAT 命令来实现的，无论客户端执行的是以上四个命令中的哪一个，经过转换之后，最终的执行效果都和执行 PEXPIREAT 命令一样：   首先，EXPIRE命令可以转换为 PEXPIRE：
def EXPIRE(key, ttl_in_sec): # 将 TTL 转换成毫秒 ttl_in_ms = sec_to_ms(ttl_in_sec) PEXPIRE(key, ttl_in_ms)   接着，PEXPIRE 命令又可以换成 PEXPIREAT 命令：</description>
    </item>
    
  </channel>
</rss>
