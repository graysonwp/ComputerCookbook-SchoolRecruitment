<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Computer Cookbook School Recruitment</title>
    <link>https://books.grayson.top/school-recruitment/docs/database/3Redis/3.1-%E6%A6%82%E8%BF%B0/</link>
    <description>Recent content on Computer Cookbook School Recruitment</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://books.grayson.top/school-recruitment/docs/database/3Redis/3.1-%E6%A6%82%E8%BF%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/database/3Redis/3.1-%E6%A6%82%E8%BF%B0/3.1.1-Redis%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%99%E4%B9%88%E5%BF%AB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/database/3Redis/3.1-%E6%A6%82%E8%BF%B0/3.1.1-Redis%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%99%E4%B9%88%E5%BF%AB/</guid>
      <description>Redis为什么这么快 #    完全基于内存，绝大部分请求是纯粹的内存操作，非常快速。
  数据结构简单，对数据操作也简单，Redis 中的数据结构是专门进行设计的。
 Redis 的具体数据类型及数据结构可参考 3.1.2 Redis 数据类型。
   采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多进程或多线程导致的切换而消耗 CPU，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗。
 Redis 为什么采用单线程，单线程有什么优点？
 因为Redis 的操作都是基于内存的，绝大部分请求是纯粹的内存操作，非常迅速。 而CPU 的速度是远大于内存的速度的，因此CPU 不是 Redis 的瓶颈，Redis 的瓶颈最有可能是机器内存或者网络带宽。 而使用单线程可以省去多线程时 CPU 上下文切换的时间，也不用去考虑各种锁的问题，不存在加锁释放锁的操作，没有死锁问题导致的性能消耗。 对于内存系统来说，多次读写都是在一个 CPU 上，没有上下文切换效率就是最高的。 既然单线程容易实现，而且CPU 不会成为瓶颈，那么就顺理成章的采用单线程的方案了。     使用多路 I/O 复用模型，非阻塞 IO。
  使用底层模型不同，他们之间底层实现方式以及与客户端之间通信的应用协议不一样，Redis 直接自己构建了 VM 机制，因为一般的系统调用函数的话，会浪费一定的时间去移动和请求。
  参考文献 #    几率大的 Redis 面试题（含答案）。  Redis 面试题（总结最全面的面试题）。  面试官：Redis 为什么这么快？除了基于内存操作还有其他原因吗？  Redis 是单线程的，但 Redis 为什么这么快？  Redis 为什么是单线程？为什么有如此高的性能？  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/database/3Redis/3.1-%E6%A6%82%E8%BF%B0/3.1.2-Redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/database/3Redis/3.1-%E6%A6%82%E8%BF%B0/3.1.2-Redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>如无特殊说明，本文内容针对的 Redis 版本为 3.0.0，源码下载地址为 redis-3.0.0。
 1 前言 #    Redis 的 key 是顶层模型，他的 value 是扁平化的，所有的 value 都是一个 object，它的结构如下：
typedef struct redisObject { unsigned [type] 4; unsigned [encoding] 4; unsigned [lru] REDIS_LRU_BITS; int refcount; void *ptr; } robj;   上面的几个字段的意义如下：
 type：数据类型，就是我们熟悉的string、hash、list 等。 encoding：内部编码，其实就是数据结构，指的是当前这个 value 底层是用的什么数据结构，因为同一个数据类型底层也有多种数据结构的实现，所以这里需要指定数据结构。 REDIS_LRU_BITS：当前对象可以保留的时长。 refcount：对象引用计数，用于 GC。 ptr：指针，指向以 encoding 的方式实现这个对象的实际地址。    整个 Redis 的数据结构组织如下图所示：
   2 数据类型 #  Redis 中主要有 5 种数据类型，分别是字符串（String）、列表（List）、集合（Set）、有序集合（ZSet）、哈希（Hash）。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/database/3Redis/3.1-%E6%A6%82%E8%BF%B0/3.1.3-%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/database/3Redis/3.1-%E6%A6%82%E8%BF%B0/3.1.3-%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6/</guid>
      <description>持久化机制 #  1 什么是持久化 #   持久化就是把内存的数据写到磁盘中去，防止服务宕机了内存数据丢失。  2 Redis 中持久化机制有哪些 #  Redis 中持久化机制主要有两种，分别是RDB（默认）和AOF。
2.1 RDB #  2.1.1 含义 #   RDB 文件主要用于保存和还原 Redis 服务器所有数据库中的所有键值对数据。 创建方式主要有两种，分别是 SAVE 和 BGSAVE：  SAVE 命令由服务器进程直接执行保存操作，所以该命令会阻塞服务器。 BGSAVE 命令由子进程执行保存操作，所以该命令不会阻塞服务器。   因为 BGSAVE 命令可以在不阻塞服务器进程的情况下执行，所以可以通过设置服务器配置的 save 选项，让服务器每隔一段时间自动执行一次 BGSAVE 命令，用户可以通过 save 选项设置多个保存条件，但只要其中任意一个条件被满足，服务器就会执行 BGSAVE 命令。  2.1.2 优缺点 #  2.1.2.1 优点 #   整个 Redis 数据库只包含一个文件，这对于文件备份来说非常方便，比如，我们可能打算每个小时归档一次最近 24 小时的数据，同时还要每天归档一次最近 30 天的数据，通过这样的备份策略，一旦系统出现灾难性故障，我们可以非常容易的进行恢复。 对于灾难性恢复而言，RDB 也是一个不错的选择，因为我们可以非常轻松的将一个单独的文件压缩后再转移到其他存储介质上。 性能最大化，对于 Redis 的服务进程而言，在开始持久化时，他唯一需要做的只是 fork 出子进程，之后再由子进程完成这些持久化的工作，这样可以极大地避免服务进程执行 IO 操作。 相比于 AOF 机制，如果数据集很大，RDB 的启动效率会更高。  2.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/database/3Redis/3.1-%E6%A6%82%E8%BF%B0/3.1.4-%E8%BF%87%E6%9C%9F%E6%9C%BA%E5%88%B6%E5%92%8C%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/database/3Redis/3.1-%E6%A6%82%E8%BF%B0/3.1.4-%E8%BF%87%E6%9C%9F%E6%9C%BA%E5%88%B6%E5%92%8C%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5/</guid>
      <description>过期机制和内存淘汰策略 #  1 过期机制 #  1.1 设置键的生存时间或过期时间 #  1.1.1 设置过期时间 #   Redis 中有四个不同的命令可以用于设置键的生存时间（键可以存在多久）或过期时间（键什么时候被删除）：  EXPIRE &amp;lt;key&amp;gt; &amp;lt;ttl&amp;gt;：命令用于将键 key 的生存时间设置为 ttl 秒。 PEXPIRE &amp;lt;key&amp;gt; &amp;lt;ttl&amp;gt;：命令用于将 键 key 的生存时间设置为 ttl 毫秒。 EXPIREAT &amp;lt;key&amp;gt; &amp;lt;timestamp&amp;gt;：命令用于将键 key 的过期时间设置为 timestamp 所指定的秒数时间戳。 PEXPIREAT &amp;lt;key&amp;gt; &amp;lt;timestamp&amp;gt;：命令用于将键 key 的过期时间设置为 timestamp 所指定的毫秒数时间戳。   虽然有多种不同单位和不同形式的设置命令，但实际上EXPIRE、PEXPIRE、EXPIREAT三个命令都是使用 PEXIREAT 命令来实现的，无论客户端执行的是以上四个命令中的哪一个，经过转换之后，最终的执行效果都和执行 PEXPIREAT 命令一样：   首先，EXPIRE命令可以转换为 PEXPIRE：
def EXPIRE(key, ttl_in_sec): # 将 TTL 转换成毫秒 ttl_in_ms = sec_to_ms(ttl_in_sec) PEXPIRE(key, ttl_in_ms)   接着，PEXPIRE 命令又可以换成 PEXPIREAT 命令：</description>
    </item>
    
  </channel>
</rss>
