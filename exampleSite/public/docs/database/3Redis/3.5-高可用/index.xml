<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Computer Cookbook School Recruitment</title>
    <link>https://books.grayson.top/school-recruitment/docs/database/3Redis/3.5-%E9%AB%98%E5%8F%AF%E7%94%A8/</link>
    <description>Recent content on Computer Cookbook School Recruitment</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://books.grayson.top/school-recruitment/docs/database/3Redis/3.5-%E9%AB%98%E5%8F%AF%E7%94%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/database/3Redis/3.5-%E9%AB%98%E5%8F%AF%E7%94%A8/3.5.1-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/database/3Redis/3.5-%E9%AB%98%E5%8F%AF%E7%94%A8/3.5.1-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</guid>
      <description>主从复制 #  1 概述 #   主从复制是指将一台 Redis 服务器的数据复制到其他的 Redis 服务器，前者称为主节点（Master），后者称为从节点（Slave）。 数据的复制是单向的，只能由主节点到从节点。 主从复制的作用主要包括：  数据冗余：  主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。   故障恢复：  当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复，实际上是一种服务的冗余。   负载均衡：  在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务，分担服务器负载，尤其在写少读多的场景下，通过多个从节点分担读负载，可以大大提高 Redis 服务器的并发量。   高可用：  除了上述作用外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是 Redis 高可用的基础。      2 实现 #  2.1 旧版复制功能 #  2.1.1 实现 #   Redis 的复制功能分为同步（Sync）和命令传播（Command Propagate）两个操作：  同步操作用于将从服务器的数据库状态更新至主服务器当前所处的数据库状态。 命令传播操作则用于在主服务器的数据库状态被修改，导致主从服务器的数据库状态出现不一致时，让主从服务器的数据库重新回到一致状态。    2.1.1.1 同步 #   当客户端向从服务器发送 SLAVEOF 命令，要求从服务器复制主服务器时，从服务器首先需要执行同步操作，也即是，将从服务器的数据库状态更新至主服务器当前所处的数据库状态。 从服务器对主服务器的同步操作需要通过向主服务器发送 SYNC 命令来完成，其主要步骤如下：   从服务器向主服务器发送 SYNC 命令。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/database/3Redis/3.5-%E9%AB%98%E5%8F%AF%E7%94%A8/3.5.2-%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/database/3Redis/3.5-%E9%AB%98%E5%8F%AF%E7%94%A8/3.5.2-%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/</guid>
      <description>哨兵模式 #  1 概述 #   哨兵模式是 Redis 的高可用的解决方案之一，由一个或多个哨兵实例组成的哨兵系统可以监视任意多个主服务器，以及这些主服务器属下的所有从服务器，并在被监视的主服务器进入下线状态时，自动将下线主服务器属下的某个从服务器升级为新的主服务器，然后由新的主服务器代替已下线的主服务器继续处理命令请求。 具体示例如下：   下图展示了一个哨兵系统监视服务器的例子，其中：
  用双环图案表示的是当前的主服务器 server1。
  用单环图案表示的是主服务器的三个从服务器 server2、server3、server4。
  server2、server3、server4 三个从服务器正在复制主服务器 server1，而哨兵系统正在监视所有四个服务器。
     假设这时，主服务器 server1 进入下线状态，那么从服务器 server2、server3、server4 对主服务器的复制操作将被终止，并且哨兵系统会察觉到 server1 已下线，如下图所示（下线的服务器用虚线表示）。
   当 server1 的下线时长超过用户设定的下线时长上限时，哨兵系统就会对 server1 执行故障转移操作：
 首先，哨兵系统会挑选server1 属下的其中一个从服务器，并将这个被选中的从服务器升级为新的主服务器。 之后，哨兵系统会向server1 属下的所有从服务器发送新的复制指令，让他们成为新的主服务器的从服务器，当所有从服务器都开始复制新的主服务器时，故障转移操作执行完毕。 另外，哨兵还会继续监视已下线的server1，并在他重新上线时，将他设置为新的主服务器的从服务器。    例如，下图展示了哨兵系统将 server2 升级为新的主服务器，并让服务器 server3 和 server4 成为 server2 的从服务器的过程，之后，如果 server1 重新上线的话，他将被哨兵系统降级为 server2 的从服务器。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/database/3Redis/3.5-%E9%AB%98%E5%8F%AF%E7%94%A8/3.5.3-%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/database/3Redis/3.5-%E9%AB%98%E5%8F%AF%E7%94%A8/3.5.3-%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F/</guid>
      <description>集群模式 #   Redis 集群是 Redis 提供的分布式数据库方案，集群通过分片来进行数据共享，并提供复制和故障转移功能。 下面将对集群的节点、槽指派、命令执行、转向、故障转移、消息等各个方面进行介绍。  1 节点 #    一个 Redis 集群通常由多个节点组成，在刚开始的时候，每个节点都是相互独立的，他们都处于一个只包含自己的集群当中，要组建一个真正可工作的集群，我们必须将各个独立的节点连接起来，构成一个包含多个节点的集群。
  连接各个节点的工作可以使用 CLUSTER MEET 命令来完成，该命令的格式如下：
CLUSTER MEET &amp;lt;ip&amp;gt; &amp;lt;port&amp;gt; 向一个节点 node 发送 CLUSTER MEET 命令，可以让 node 节点与 ip 和 port 所指定的节点进行握手，当握手成功时，node节点就会将 ip 和 port 所指定的节点添加到 node 节点所在的集群中。
  具体实例如下：
   1.1 启动节点 #    一个节点就是一个运行在集群模式下的 Redis 服务器，Redis 服务器在启动时会根据 cluster_enabled 配置选项是否为 yes 来决定是否开启服务器的集群模式，如下图所示：
   节点（运行在集群模式下的 Redis 服务器）会继续使用所有在单机模式中使用的服务器组件，比如说：</description>
    </item>
    
  </channel>
</rss>
