<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Computer Cookbook School Recruitment</title>
    <link>https://books.grayson.top/school-recruitment/docs/design-pattern/4%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</link>
    <description>Recent content on Computer Cookbook School Recruitment</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://books.grayson.top/school-recruitment/docs/design-pattern/4%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/design-pattern/4%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/4.1-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/design-pattern/4%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/4.1-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</guid>
      <description>1 模式动机 #   完成一项任务，往往可以有多种不同的方式，每一种方式称为一个策略，我们可以根据环境或者条件的不同选择不同的策略来完成该项任务。 在软件开发中也常常遇到类似的情况，实现某一个功能有多个路径，此时可以使用一种设计模式来使得系统可以灵活地选择解决路径，也能够方便地增加新的解决路径。 在软件系统中，有许多算法可以实现某一功能，如查找、排序等，一种常用的方法是硬编码在一个类中，如需要提供多种查找方法，可以将这些算法写到一个类中，在该类中提供多个方法，每一个方法对应一个具体的查找算法，当然也可以将这些查找算法封装在一个统一的方法中，通过if...else... 等条件判断语句来进行选择，这两种实现方法我们都称之为硬编码，如果需要增加一种新的查找算法，需要修改封装算法类的源代码，更换查找算法，也需要修改客户端调用代码，在这个算法类中封装了大量查找算法，该类代码将较复杂，维护较为困难。 除了提供专门的查找算法类之外，还可以在客户端程序中直接包含算法代码，这种做法更不可取，将导致客户端程序庞大而且难以维护，如果存在大量可供选择的算法时，问题将变得更加严重。 为了解决这些问题，可以定义一些独立的类来封装不同的算法，每一个类封装一个具体的算法，在这里，每一个封装算法的类我们都可以称之为策略（Strategy），为了保证这些策略的一致性，一般会用一个抽象的策略类来做算法的定义，而具体每种算法则对应于一个具体策略类。  2 模式定义 #   策略模式（Strategy Pattern）是指定义一系列算法，将每一个算法封装起来，并让他们可以相互替换。 策略模式让算法独立于使用他的客户而变化，也称为政策模式（Policy Pattern）。  3 模式结构 #  策略模式包含如下角色：
 「抽象策略（Strategy）」角色：是「具体策略」的父类，定义所有支持的算法的公共接口。 「具体策略（ConcreteStrategy）」角色：封装了具体的算法或行为。 「环境（Context）」角色：用一个「具体策略」来配置，维护一个对抽象策略对象的引用。   4 使用步骤 #  策略模式的使用主要包含四步：
 创建「抽象策略」类，并定义所有支持的算法的公共接口。 创建「具体策略」类，并定义具体的算法实现。 创建「环境」类，通过构造方法，传入具体的策略参数，并根据具体的策略对象来调用其算法。 外界通过调用「环境」类的方法，通过传入不同参数来实例化不同的策略，从而得到不同的结果。   5 示例 #  下面将通过一个商场的收银系统为例进行说明，商场收银系统需要能够处理正常收费、商品打折和节假日满减等各种活动，这里正常收费、打折和满减是该系统需要实现的具体算法，他们都共用一个收费接口。
5.1 创建抽象策略类 #  创建 CashStrategy 的抽象策略类，并定义所支持的算法的公共接口 acceptCash()：
abstract class CashStrategy { /** * 收费 * @param money 金额 * @return 最终收费金额 */ public abstract double acceptCash(double money); } 5.</description>
    </item>
    
  </channel>
</rss>
