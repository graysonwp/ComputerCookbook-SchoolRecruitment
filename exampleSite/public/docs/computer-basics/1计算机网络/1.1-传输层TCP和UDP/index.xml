<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Computer Cookbook School Recruitment</title>
    <link>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.1-%E4%BC%A0%E8%BE%93%E5%B1%82TCP%E5%92%8CUDP/</link>
    <description>Recent content on Computer Cookbook School Recruitment</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.1-%E4%BC%A0%E8%BE%93%E5%B1%82TCP%E5%92%8CUDP/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.1-%E4%BC%A0%E8%BE%93%E5%B1%82TCP%E5%92%8CUDP/1.1.1-%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.1-%E4%BC%A0%E8%BE%93%E5%B1%82TCP%E5%92%8CUDP/1.1.1-%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/</guid>
      <description>三次握手 #  1 什么是三次握手 #    第一次握手：Client 将SYN 置为 1，随机产生一个初始序列号seq 发送给Server，进入SYN_SENT 状态。 第二次握手：Server 收到Client 的SYN=1 后，知道客户端请求建立连接，将自己的SYN 置为 1，ACK 置为 1，产生一个acknowledge number = seq + 1，并随机产生一个自己的初始序列号，发送给客户端，进入SYN_RCVD 状态。 第三次握手： 客户端检查acknowledge number 是否为序列号 +1，ACK 是否为 1，检查正确之后，将自己的ACK 置为 1，产生一个acknowledge number = 服务器发的序列号 + 1，发送给服务器，进入ESTBLISHED 状态；服务器检查ACK 为 1，acknowledge number = 序列号 + 1 之后，也进入ESTBLISHED 状态，完成三次握手，连接建立。  2 三次握手的必要性 #   第一次握手：客户端发送网络包，服务端收到了，这样服务端就能得出结论，客户端的发送能力、服务端的接收能力是正常的。 第二次握手：服务端发送网络包，客户端收到了，这样客户端就能得出结论，服务端的接收能力、发送能力、客户端的接收、发送能力是正常的，不过此时服务器并不能确认客户端的接收能力是否正常。 第三次握手：客户端发送网络包，服务端收到了，这样服务器就能得出结论，客户端的接收能力、服务端的接收能力是正常的。  3 TCP 连接可以两次握手吗 #  不可以，主要有两个原因：
 可能会出现已失效的连接请求报文段又传到了服务器端。  Client 发出的第一个连接请求报文段并没有丢失，而是在某个网络节点长时间的滞留了，以延误到连接释放以后的某个时间才到达Server。 本来这是一个早已失效的报文段，但Server 收到此失效的连接请求报文段后，就误认为是Client 再次发出的一个新的连接请求，于是就向Client 发出确认报文段，同意建立连接。 如果不采用三次握手，那么只要Server 发出确认，新的连接就建立了。 由于现在Client 并没有发出建立连接的请求，因此不会理睬Server 的确认，也不会向Server 发送数据，但Server 却认为新的连接已经建立，并一直等待Client 发来数据，这样，Server 的很多资源就白白浪费掉了。 采用三次握手的办法就可以防止上述现象发生，就像刚才那种情况，Client 不会向Server 的确认发出确认，Server 由于收不到确认，就知道Client 并没有要求建立连接。   无法保证 Client 正确接收第二次握手的报文（Server 无法确认 Client 是否收到），也无法保证 Client 和 Server 之间成功互换初始序列号。  4 可以采用四次握手吗 #  可以，但是会降低传输的效率。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.1-%E4%BC%A0%E8%BE%93%E5%B1%82TCP%E5%92%8CUDP/1.1.2-%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.1-%E4%BC%A0%E8%BE%93%E5%B1%82TCP%E5%92%8CUDP/1.1.2-%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</guid>
      <description>四次挥手 #  1 什么是四次挥手 #    第一次挥手：Client 将FIN 置为 1，发送一个序列号seq 给Server，进入FIN_WAIT_1 状态。 第二次挥手：Server 收到FIN 之后，发送一个ACK=1，acknowledge number=收到的序列号 +1，进入CLOSE_WAIT 状态，此时客户端已经没有要发送的数据了，但仍可以接受服务器发来的数据。 第三次挥手：Server 将FIN 置为 1，发送一个序列号给Client，进入LAST_ACK 状态。 第四次挥手：Client 收到服务器的FIN 之后，进入TIME_WAIT 状态，接着将ACK 置为 1，发送一个acknowledge number=序列号 +1 给服务器，服务器收到后，确认acknowledge number 后，变为CLOSED 状态，不再向客户端发送数据，客户端等待2*MSL（报文段最长寿命） 时间后，也进入CLOSED 状态，完成四次挥手。   MSL 是什么？
 MSL（Maximum Segment Lifetime），即报文段最长寿命，指一个片段在网络中最大的存活时间，2MSL 就是一个发送和一个回复所需的最大时间。 如果直到 2MSL，Client 都没有再次收到 FIN，那么 Client 推断 ACK 已经被成功接收，则结束 TCP 连接。   2 CLOSE_WAIT #  2.1 服务器端 CLOSE_WAIT 状态意义是什么（为什么不能把服务器发送的 ACK 和 FIN 合并起来，变成三次挥手） #   因为服务器收到客户端断开连接的请求时，可能还有一些数据没有发完，这时先回复 ACK，表示接收到了断开连接的请求。 等到数据发完之后再发 FIN，断开服务器到客户端的数据传送。  2.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.1-%E4%BC%A0%E8%BE%93%E5%B1%82TCP%E5%92%8CUDP/1.1.3-%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.1-%E4%BC%A0%E8%BE%93%E5%B1%82TCP%E5%92%8CUDP/1.1.3-%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/</guid>
      <description>流量控制 #  1 TCP如何实现流量控制 #    TCP使用滑动窗口协议来实现流量控制，防止发送方发送速率太快，接收方缓存区不够导致溢出。 接收方会维护一个接收窗口，其大小是根据自己的资源情况动态调整的，在返回ACK时将接收窗口大小放在 TCP报文中的窗口字段告知发送方。 发送窗口的大小不能超过接受窗口的大小，只有当发送方发送并收到确认之后，才能将发送窗口左移。 发送窗口的上限为接收窗口和拥塞窗口的最小值，接收窗口表明了接收方的接收能力，拥塞窗口表明了网络的传送能力。  2 什么是零窗口（接收窗口为0时会怎样） #   如果接收方没有能力接收数据，就会将接收窗口设置为0，这时发送方必须暂停发送数据，但是会启动一个持续计时器，到期后发送一个大小为1字节的探测数据包，以查看接收窗口状态。 如果接收方能够接收数据，就会在返回的报文中更新接收窗口大小，恢复数据传送。  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.1-%E4%BC%A0%E8%BE%93%E5%B1%82TCP%E5%92%8CUDP/1.1.5-%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.1-%E4%BC%A0%E8%BE%93%E5%B1%82TCP%E5%92%8CUDP/1.1.5-%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/</guid>
      <description>拥塞控制 #  1 TCP 的拥塞控制是怎么实现的 #   拥塞控制主要由四个算法组成：慢启动（Slow Start）、拥塞避免（Congestion Voidance）、快重传（Fast Retransmit）、快恢复（Fast Recovery）：
 慢启动： 刚开始发送数据时，先把拥塞窗口（Congestion Window）设置为 1 个最大的报文段MSS 的数值，每收到 1 个新的确认报文之后，就把拥塞窗口加 1 个MSS，这样每经过一个传输轮次（或者说每经过一个往返时间RTT），拥塞窗口的大小就会加倍。 拥塞避免： 当拥塞窗口的大小达到慢开始门限（Slow Start Threshold）时，开始执行拥塞避免算法，拥塞窗口大小不再指数增加，而是线性增加，即每经过一个传输轮次，只增加 1 个MSS。  无论在慢开始阶段还是拥塞避免阶段，只要发送方判断网络出现拥塞（其根据就是没有收到确认），就要把慢开始门限设置为出现拥塞时的发送方窗口的一半（但不能小于 2），然后把拥塞窗口重新设置为 1，执行慢开始算法。
  快重传： 快重传要求接收方在收到一个失序的报文段后就立即发出重复确认，为的是使发送方尽早知道有报文段没有到达对方，而不要等到自己发送数据时捎带确认，快重传算法规定，发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。 快恢复： 当发送方连续收到三个重复确认时，就把慢开始门限减半，然后执行拥塞避免算法，不执行慢开始的原因是如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方认为现在网络可能没有出现拥塞。  2 参考文献 #    TCP 的拥塞控制是怎么实现的？  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.1-%E4%BC%A0%E8%BE%93%E5%B1%82TCP%E5%92%8CUDP/1.1.6-TCP%E5%92%8CUDP%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.1-%E4%BC%A0%E8%BE%93%E5%B1%82TCP%E5%92%8CUDP/1.1.6-TCP%E5%92%8CUDP%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>TCP和UDP的区别 #  1 TCP与UDP的区别有哪些 #    TCP是面向连接的，UDP是无连接的，即UDP发送数据之前不需要建立连接。
  TCP是可靠的，UDP是不可靠的，这是因为UDP接收方收到报文后，不需要给出任何确认。
  TCP只支持点对点通信，UDP支持一对一、一对多、多对一、多对多；
  TCP是面向字节流的，UDP是面向报文的：
 面向字节流是指发送数据时以字节为单位，一个数据包可以拆分成若干组进行发送，而UDP一个报文只能一次发完。
   TCP有拥塞控制机制，UDP没有，网络出现的拥塞不会使源主机的发送速率降低，这对某些实时应用是很重要的，比如媒体通信、游戏。
  TCP首部开销（20字节）比UDP首部开销（8字节）要大。
  UDP的主机不需要维持复杂的连接状态表。
  2 什么时候选择TCP，什么时候选择UDP #   对某些实时性要求比较高的情况，选择UDP，比如游戏、媒体通信、实时视频流（直播），即使出现传输错误也可以容忍。 其他大部分情况下，HTTP都是用TCP，因为要求传输的内容可靠，不出现丢失。  3 HTTP可以使用UDP吗 #   HTTP3.0之前使用TCP协议，而HTTP3.0使用基于UDP协议的QUIC协议组成。 此变化主要是为了解决HTTP2.0中存在的对头阻塞问题，由于HTTP2.0在单个TCP连接上使用了多路复用，受到TCP拥塞控制的影响，少量的丢包就可能导致整个TCP连接上的所有流被阻塞。  4 面向连接和无连接的区别 #   面向连接的网络服务（虚电路服务）：  首先建立连接，所有的数据包经过相同的路径，服务质量有较好地保证。   无连接的网络服务（数据报服务）：  每个数据包含目的地址，数据路由相互独立，路径可能变化。 网络尽最大努力交付数据，但不保证不丢失、不保证先后顺序、不保证在时限内交付。 网络发生拥塞时，可能会将一些分组丢弃。    参考文献 #    TCP与UDP的区别。  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.1-%E4%BC%A0%E8%BE%93%E5%B1%82TCP%E5%92%8CUDP/1.1.7-TCP%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E4%BC%A0%E8%BE%93%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.1-%E4%BC%A0%E8%BE%93%E5%B1%82TCP%E5%92%8CUDP/1.1.7-TCP%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E4%BC%A0%E8%BE%93%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7/</guid>
      <description>TCP如何保证传输的可靠性 #   数据包校验。 对失序数据包重新排序（TCP报文具有序列号）。 丢弃重复数据。 应答机制：接收方收到数据之后，会发送一个确认。 超时重发：发送方发出数据之后，启动一个定时器，超时未收到接收方的确认，则重新发送这个数据。 流量控制：确保接收端能够接收发送方的数据，而不会出现缓冲区溢出的情况。  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.1-%E4%BC%A0%E8%BE%93%E5%B1%82TCP%E5%92%8CUDP/1.1.8-TCP%E9%95%BF%E8%BF%9E%E6%8E%A5%E5%92%8C%E7%9F%AD%E8%BF%9E%E6%8E%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.1-%E4%BC%A0%E8%BE%93%E5%B1%82TCP%E5%92%8CUDP/1.1.8-TCP%E9%95%BF%E8%BF%9E%E6%8E%A5%E5%92%8C%E7%9F%AD%E8%BF%9E%E6%8E%A5/</guid>
      <description>TCP长连接和短连接 #  TCP的具体介绍可参考 1.1.1 三次握手和 1.1.2 四次挥手，下面主要介绍TCP的短连接、长连接及其二者的优缺点。
1 短连接 #  1.1 含义 #   短连接是指通信双方有数据交互时，就建立TCP连接，数据发送完成后，则断开此TCP连接。 短连接的模式是$连接 \rightarrow 数据传输 \rightarrow 关闭连接&amp;hellip;建立连接 \rightarrow 数据传输 \rightarrow 关闭连接$。  1.2 优缺点 #  1.2.1 优点 #   管理起来比较简单，存在的连接都是有用的连接，不需要额外的控制手段。  1.2.2 缺点 #   如果客户请求频繁，将在TCP的建立和关闭操作上浪费时间和带宽。  1.3 适用场景 #   适用于像WEB网站的HTTP服务，因为长连接对于服务端来说会耗费一定的资源，而像WEB网站这么频繁的成千上万甚至上亿客户端的连接用短连接会更省一些资源，如果用长连接，而且同时有成千上万的用户，如果每个用户都占用一个连接的话，那可想而知，所以并发量大，但每个用户无需频繁操作情况下使用短连接比较好。  2 长连接 #  2.1 含义 #   长连接是指在一个TCP连接上可以连续发送多个数据包。 在TCP连接保持期间，如果没有数据包发送，需要双方发检测包以维持此连接，一般需要自己做在线维持。 如果一个给定的连接在两小时内没有任何动作，则服务器就向客户端发送一个探测报文段，客户端必须处于以下4个状态之一：  客户端依然正常运行，并从服务器可达，客户端的TCP响应正常，而服务器也知道对方是正常的，服务器在两小时后将保活定时器复位。 客户端已经崩溃，并且关闭或者正在重新启动，在任何一种情况下，客户端的TCP都没有响应，服务器将不能收到对探测的响应，并在75秒后超时，服务器总共发送10个这样的探测，每个间隔75秒，如果服务器没有收到一个响应，他就认为客户端已经关闭并终止连接。 客户端崩溃并已经重新启动，服务器将收到一个对其保活探测的响应，这个响应是一个复位，使得服务器终止这个连接。 客户端正常运行，但是服务器不可达，这种情况与2类似，TCP能发现的就是没有收到探查的响应。    2.</description>
    </item>
    
  </channel>
</rss>
