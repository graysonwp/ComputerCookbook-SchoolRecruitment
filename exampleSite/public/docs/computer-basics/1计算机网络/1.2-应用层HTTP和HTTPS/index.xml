<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>1.2 应用层：HTTP和HTTPS on Computer Cookbook School Recruitment</title>
    <link>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.2-%E5%BA%94%E7%94%A8%E5%B1%82HTTP%E5%92%8CHTTPS/</link>
    <description>Recent content in 1.2 应用层：HTTP和HTTPS on Computer Cookbook School Recruitment</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.2-%E5%BA%94%E7%94%A8%E5%B1%82HTTP%E5%92%8CHTTPS/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.2-%E5%BA%94%E7%94%A8%E5%B1%82HTTP%E5%92%8CHTTPS/1.2.1-HTTP%E5%92%8CHTTPS%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.2-%E5%BA%94%E7%94%A8%E5%B1%82HTTP%E5%92%8CHTTPS/1.2.1-HTTP%E5%92%8CHTTPS%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>HTTP和HTTPS的区别 #  1 HTTP和HTTPS有什么区别 #   端口不同：HTTP使用80端口，HTTPS使用443端口。 HTTP（超文本传输协议）信息是明文传输，HTTPS运行在SSL（Secure Socket Layer）之上，添加了加密和认证机制，更加安全。 HTTPS由于加密解密会带来更大的CPU和内存开销。 HTTPS通信需要证书，一般需向证书颁发机构购买。  2 HTTPS的连接过程 #   客户端向服务器发出请求，同时发送客户端支持的一套加密规则（包括对称加密、非对称加密、摘要算法）。 服务器从中选取一种加密算法与HASH算法，并将自己的身份信息以证书的形式发回给浏览器。证书里面包含了网站地址、加密公钥（用于非对称加密）以及证书的颁发机构等信息（证书中的私钥只能用于服务器端进行解密）。 客户端验证服务器的合法性，包括证书是否过期、CA是否可靠、发行者证书的公钥能否正确解开服务器证书的发行者的数字签名、服务器证书的域名是否和服务器的实际域名相匹配。 如果证书受信任，或者用户接受了不受信任的证书，浏览器会生成一个随机密钥，并用于服务器提供的公钥加密，然后使用HASH算法对握手消息进行摘要计算，并对摘要使用之前产生的密钥加密，最后将加密后的随机密钥和摘要一起发送给服务器。 服务器使用自己的私钥解密，得到对称加密的密钥，用这个密钥解密出HASH摘要值，并验证握手消息是否一致，如果一致，服务器使用对称加密的密钥加密握手消息发送给浏览器。 浏览器解密并验证摘要，若一致，则握手结束，之后的数据传送都使用对称加密的密钥进行加密。    非对称加密算法用于在握手过程中加密生成的密码。 对称加密算法用于对真正传输的数据进行加密。 HASH算法主要用于验证数据的完整性。   3 输入www.baidu.com，怎么变成https://www.baidu.com，怎么确定用HTTP还是HTTPS #   一种是原始的302跳转，服务器把所有的HTTP流量跳转到HTTPS，但这样有一个漏洞，就是中间人可能在第一次访问站点的时候就劫持。 解决方法是引入HSTS机制，返回的302报文中有这样一条Strict-Transport-Security: max-age=31536000，其含义是强制浏览器在max-age到期之前，把所有的http://www.baidu.com自动转换成https://www.baidu.com，这是浏览器实现的URL转换，不用每次访问两次服务器，避免了302跳转到80再跳转到443的中间人劫持的问题，所以只有第一次的时候会出现302，以后访问就不会出现了。  4 什么是对称加密、非对称加密，区别是什么 #   对称加密：  加密和解密采用相同的密钥，如DES、RC2、RC4。   非对称加密：  需要两个密钥：公钥和私钥。 如果用公钥加密，需要用私钥才能解密，如RSA。   区别：  对称加密速度更快，通常用于大量数据的加密。 非对称加密安全性更高（不需要传送私钥）。    5 数字签名、报文摘要的原理 #   发送者A用私钥进行签名，接收者B用公钥验证签名，因为除A外没有人有私钥，所以B相信签名是来自A，A不可抵赖，B也不能伪造报文。 摘要算法： MD5、SHA。  6 参考文献 #    HTTP和HTTPS有什么区别？  输入网址的时候，浏览器是如何判断你是http协议还是https协议的。  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.2-%E5%BA%94%E7%94%A8%E5%B1%82HTTP%E5%92%8CHTTPS/1.2.2-GET%E5%92%8CPOST%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.2-%E5%BA%94%E7%94%A8%E5%B1%82HTTP%E5%92%8CHTTPS/1.2.2-GET%E5%92%8CPOST%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>GET和POST的区别 #   GET是幂等的，即读取同一个资源，总是得到相同的数据，POST不是幂等的。 GET一般用于从服务器获取资源，而POST有可能改变服务器上的资源。 GET请求的数据附在URL之后，在HTTP请求头中；POST请求的数据在请求体中。 GET请求可被缓存、收藏、保留到历史记录，且其数据明文出现在URL中；POST请求的参数不会被保存，安全性相对较高。 GET只允许ASCII字符，POST对数据类型没有要求，也允许二进制数据。 GET长度有限制（操作系统或者浏览器），而POST数据大小无限制。  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.2-%E5%BA%94%E7%94%A8%E5%B1%82HTTP%E5%92%8CHTTPS/1.2.3-Session%E4%B8%8ECookie%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.2-%E5%BA%94%E7%94%A8%E5%B1%82HTTP%E5%92%8CHTTPS/1.2.3-Session%E4%B8%8ECookie%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>Session与Cookie的区别 #   Session是服务器端保持状态的方案，Cookie是客户端保持状态的方案。 Cookie保存在客户端本地，客户请求服务器时会将Cookie一起提交；Session保存在服务端，通过检索Sessionid查看状态，保存Sessionid的方式可以采用Cookie，如果禁用了Cookie，可以使用URL重写机制（把Sessionid保存在URL中）。  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.2-%E5%BA%94%E7%94%A8%E5%B1%82HTTP%E5%92%8CHTTPS/1.2.4-%E4%BB%8E%E8%BE%93%E5%85%A5%E7%BD%91%E5%9D%80%E5%88%B0%E8%8E%B7%E5%BE%97%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%BF%87%E7%A8%8B%E8%B6%8A%E8%AF%A6%E7%BB%86%E8%B6%8A%E5%A5%BD/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.2-%E5%BA%94%E7%94%A8%E5%B1%82HTTP%E5%92%8CHTTPS/1.2.4-%E4%BB%8E%E8%BE%93%E5%85%A5%E7%BD%91%E5%9D%80%E5%88%B0%E8%8E%B7%E5%BE%97%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%BF%87%E7%A8%8B%E8%B6%8A%E8%AF%A6%E7%BB%86%E8%B6%8A%E5%A5%BD/</guid>
      <description>从输入网址到获得页面的过程（越详细越好） #   域名解析，即浏览器查询 DNS，获取域名对应的 IP 地址，具体可参考 1.2.8 DNS。 建立 TCP 连接，即浏览器获得域名对应的 IP 地址以后，向服务器请求建立链接，发起三次握手，这里使用五层协议更详细的描述如何建立这个 TCP 连接的：  使用应用层发起 HTTP 请求，这个可以根据我们本身输入的 URL 访问时，用的什么协议就发起对应协议去进行请求。 然后是传输层的 TCP 协议为传输报文提供可靠的字节流服务，这里使用了TCP 三次握手。 接着是网络层把 TCP 分隔好的各种数据包传送给接收方，而且要保证确实能传到接收方还需要接收方的 MAC 地址，也就是物理地址。 最后是链路层将数据发送到数据链路层传输。 至此，请求报文已发出，客户端发送请求的阶段结束。 然后是服务端接收请求处理阶段，将数据按照原路进行处理，即 $ 链路层 \rightarrow 网络层 \rightarrow 传输层 \rightarrow 应用层 $，然后响应客户端的发送报文。   TCP/IP 链接建立起来后，浏览器向服务器发送 HTTP 请求。 服务器收到这个请求之后，根据路径参数映射到特定的请求处理器进行处理，并将处理结果及相应的视图返回给浏览器。 浏览器解析并渲染视图，若遇到对 js、css 及图片等静态资源的引用时，则重复上述步骤并向服务器请求这些资源。 浏览器根据其请求到的资源、数据渲染页面，最终向用户呈现一个完整的页面  参考文献 #    HTTP 和 HTTPS 有什么区别？  （3）字节跳动面试题：从输入网址到获得页面的网络请求的过程，请详细说一下。  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.2-%E5%BA%94%E7%94%A8%E5%B1%82HTTP%E5%92%8CHTTPS/1.2.5-HTTP%E8%AF%B7%E6%B1%82%E6%9C%89%E5%93%AA%E4%BA%9B%E5%B8%B8%E8%A7%81%E7%9A%84%E7%8A%B6%E6%80%81%E7%A0%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.2-%E5%BA%94%E7%94%A8%E5%B1%82HTTP%E5%92%8CHTTPS/1.2.5-HTTP%E8%AF%B7%E6%B1%82%E6%9C%89%E5%93%AA%E4%BA%9B%E5%B8%B8%E8%A7%81%E7%9A%84%E7%8A%B6%E6%80%81%E7%A0%81/</guid>
      <description>HTTP请求有哪些常见的状态码 #    2xx： 操作成功，200 OK。
  3xx： 重定向，301 永久重定向，302 暂时重定向。
  4xx： 客户端错误，400 Bad Request，401 Unauthorized，403 Forbidden；404 Not Found。
 401 Unauthorized：用来表示缺失或错误的认证，可以修改后重试。
403 Forbidden：用户认证后，权限不足，无法对该资源进行操作。
   5xx： 服务端错误，500 服务器内部错误，501 服务不可用。
  参考资料 #    HTTP请求有哪些常见状态码？  HTTP 状态码 401 和 403 的区别。  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.2-%E5%BA%94%E7%94%A8%E5%B1%82HTTP%E5%92%8CHTTPS/1.2.6-%E4%BB%80%E4%B9%88%E6%98%AFRIP%E7%AE%97%E6%B3%95%E6%98%AF%E4%BB%80%E4%B9%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.2-%E5%BA%94%E7%94%A8%E5%B1%82HTTP%E5%92%8CHTTPS/1.2.6-%E4%BB%80%E4%B9%88%E6%98%AFRIP%E7%AE%97%E6%B3%95%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
      <description>什么是RIP，算法是什么 #  1 简介 #   RIP全称是Routing Information Protocol，即路由信息协议，是一种较为简单的内部网关协议（Interior Gateway Protocol）。 他通过UDP报文进行路由信息的交换，使用的端口号是520。  2 原理 #   RIP是一种基于距离矢量（DIstance-Vector）算法的协议，使用跳数（Hop Count）作为度量值来衡量到达目的地址的距离。 RIP属于网络层，主要应用于规模较小的，可靠性要求较低的网络，可以通过不断的交换信息让路由器动态的适应网络连接的变化，这些信息包括每个路由器可以到达哪些网络，这些网络有多远等。 在RIP网络中，缺省情况下，设备到他直接连接网络的跳数为0，通过一个设备可达的网络跳数为1，其余以此类推，也就是说，度量值等于从本网络到达目的网络间的设备数量。 为限制收敛时间，RIP规定度量值取0~15之间的整数，大于或等于16的跳数被定义为无穷大，即目的网络或主机不可达，由于这个限制，使得RIP不可能在大型网络中得到应用。  3 RIP路由表的形成过程 #  RIP启动时的初始路由表仅包含本设备的一些直连接口路由，通过相邻设备互相学习路由表项，才能实现各网段路由互通。
 RIP路由表形成过程如上图所示：
 RIP协议启动之后，RouterA会向相邻的路由器广播一个Request报文。 当RouterB从接口接收到RouterA发送的Request报文后，把自己的RIP路由表封装在Response报文内，然后向该接口对应的网络广播。 RouterA根据RouterB发送的Response报文，形成自己的路由表。  4 优缺点 #  4.1 优点 #    实现简单，开销较小。  4.2 缺点 #   RIP限制了网路的规模，它能使用的最大距离为15（16表示不可达）。 路由器之间交换的路由信息是路由器中的完成路由表，因而随着网络规模的扩大，开销也就增加。 “坏消息传播得慢”，使更新过程的收敛时间更长，即当网络出现故障时，要经过较长的时间才能将此信息传递到所有路由器。  5 RIP协议中，为什么会出现坏消息传播的慢 #    我们可以假设三个网络通道由两个路由器互联起来，并且都已建立了各自的路由表，图中路由器的交换信息只给出了我们感兴趣的一行内容：路由器$R_1$中的 1，1，直接表示到网1的距离是1，直接交付，路由器$R_2$中的 1，2，R1表示到网1的距离是2，下一跳经过R1。 现在假定路由器$R_1$到网1的链路出现了故障，$R_1$无法到达网1，于是路由器$R_1$把到网1的距离改为16（表示到网1不可达），因而在$R_1$的路由表中的相应项目变为 1，16，直接。 但是，很可能要经过30秒中后$R_1$才把更新信息发送给$R_2$，然而$R_2$可能已经先把自己的路由表发送给了$R_1$，其中有 1，2，R1。 $R_1$收到$R_2$的更新报文之后，误认为可经过$R_2$到达网1，于是把收到的路由信息 1，2，R1修改为1，3，R2，表明我到网1的距离是3，下一条经过R2，并把更新后的信息发送给$R_2$。 同理，$R_2$接着又更新自己的路由表为 1，4，R1，以为我到网1的距离是4，下一跳经过R1。 这样的更新一直持续下去，直到$R_1$和$R_2$到网1的距离都增大到16时，$R_1$和$R_2$才知道原来网1是不可达的。 RIP协议的这一特点叫做“好消息传播得快，坏消息传播得慢”，网络出故障的传播时间往往需要较长的时间（例如数分钟）。 为了使坏消息传播得快些，可以采取多种措施，例如让路由器记录收到某特定路由信息的接口，而不让同一路由信息再通过此接口向反方向传送。  6 参考文献 #    什么是RIP (距离矢量路由协议)?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.2-%E5%BA%94%E7%94%A8%E5%B1%82HTTP%E5%92%8CHTTPS/1.2.7-HTTP1.0HTTP1.1%E5%92%8CHTTP2.0%E7%9A%84%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.2-%E5%BA%94%E7%94%A8%E5%B1%82HTTP%E5%92%8CHTTPS/1.2.7-HTTP1.0HTTP1.1%E5%92%8CHTTP2.0%E7%9A%84%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB/</guid>
      <description>HTTP1.0、HTTP1.1和HTTP2.0的主要区别 #  1 HTTP1.0 和 HTTP1.1 的区别 #    缓存处理：
 在 HTTP1.0 中主要使用header 里的If-Modified-Since,Expires 来作为缓存判断的标准，HTTP1.1 则引入了更多的缓存控制策略，例如Entity tag、If-Unmodified-Since、If-Match、If-None-Match 等更多可供选择的缓存头来控制缓存策略。    带宽优化及网络连接的使用：
 HTTP1.0 中存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象都送过来了，并且不支持断点续传功能，HTTP1.1 则在请求头中添加了range 字段，他允许只请求资源的某个部分，这样就方便了开发者自由的选择，以便于充分的利用带宽。    错误通知的管理：
 在 HTTP1.1 中新增了 24 个错误状态响应码，如 409（Confilct）表示请求的资源与资源的当前状态发生冲突，410（Gone）表示服务器上的某个资源被永久性的删除。    Host 头处理：
 在 HTTP1.0 中认为每台服务器都绑定一个唯一的 IP 地址，因此请求头中的 URL 并没有传递主机名，但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机，并且他们共享一个 IP 地址，HTTP1.1 的请求消息和响应消息都应该支持 Host 字段，请求消息中如果没有 Host 字段会报 400（Bad Request）。    长连接：
  HTTP1.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.2-%E5%BA%94%E7%94%A8%E5%B1%82HTTP%E5%92%8CHTTPS/1.2.8-DNS/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.2-%E5%BA%94%E7%94%A8%E5%B1%82HTTP%E5%92%8CHTTPS/1.2.8-DNS/</guid>
      <description>DNS #  1 含义 #   DNS，就是 Domain Name System，即域名系统，是互联网上作为域名和 IP 地址相互映射的一个分布式数据库。 DNS 能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的 IP 数串。  2 域名解析过程 #    网络客户端就是我们平常使用的电脑，打开浏览器，输入一个域名，比如www.163.com，这时，我们的电脑会发出一个 DNS 请求到本地 DNS 服务器，本地 DNS 服务器一般都是我们的网络接入服务器商提供，比如中国电信、中国移动。 查询www.163.com 的DNS 请求到达本地 DNS 服务器之后，本地 DNS 服务器会首先查询他的缓存记录，如果缓存中有此条记录，就可以直接返回结果，如果没有，本地 DNS 服务器还要向 DNS 根服务器进行查询。 根 DNS 服务器没有记录具体的域名和 IP 地址的对应关系，而是告诉本地 DNS 服务器，你可以到域服务器上去继续查询，并给出域服务器的地址。 本地 DNS 服务器继续向域服务器发出请求，在这个例子中，请求的对象是 .com 域服务器，.com 域服务器收到请求之后，也不会直接返回域名和 IP 地址的对应关系，而是告诉本地 DNS 服务器，你的域名的解析服务器的地址。 最后，本地 DNS 服务器向域名的解析服务器发出请求，这时就能收到一个域名和 IP 地址的对应关系，本地 DNS 服务器不仅要把 IP 地址返回给用户电脑，还要把这个对应关系保存在缓存中，以备下次别的用户查询时，可以直接返回结果，加快网络访问。  3 DNS 劫持 #  3.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.2-%E5%BA%94%E7%94%A8%E5%B1%82HTTP%E5%92%8CHTTPS/1.2.9-HTTPS%E5%8A%A0%E5%AF%86%E5%92%8C%E8%AE%A4%E8%AF%81%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.2-%E5%BA%94%E7%94%A8%E5%B1%82HTTP%E5%92%8CHTTPS/1.2.9-HTTPS%E5%8A%A0%E5%AF%86%E5%92%8C%E8%AE%A4%E8%AF%81%E8%BF%87%E7%A8%8B/</guid>
      <description>HTTPS加密和认证过程 #  1 为什么要加密 #   因为HTTP 的内容是明文传输的，明文数据会经过中间代理服务器、路由器、WIFI 热点、通信服务运行商等多个物理节点。 如果信息在传输过程中被劫持，传输的内容就完全暴露了，同时劫持者还可以篡改传输的信息切不被对方察觉，这就是中间人攻击。 所以我们才需要对信息进行加密。  2 常见的加密算法 #  常见的加密算法可以分成三类，分别是对称加密算法、非对称加密算法和Hash 算法。
2.1 对称加密算法 #  2.1.1 含义 #    对称加密算法指加密和解密使用相同密钥的加密算法，简单说就是有一个密钥，他可以加密一段信息，也可以对加密后的信息进行解密，和我们日常生活中用的钥匙作用差不多。 对称加密的优缺点为：  优点：  加解密的效率高、加密速度快。   缺点：  对于密钥的管理和分发上比较困难，不是非常安全，密钥管理负担很重。      2.1.2 常用算法 #  常用的对称加密算法包括DES、3DES、AES、DESX、Blowfish、RC4、RC5、RC6，下面以 DES、3DES、AES 为例进行简单介绍：
 DES（Data Encryption Standard）：数据加密标准，速度较快，适用于加密大量数据的场合。 3DES（Triple DES）：基于 DES，对一块数据采用三个不同的密钥进行三次加密，强度更高。 AES（Advanced Encryption Standard）：高级加密标准，是下一代的加密算法标准，速度快、安全级别高。  2.1.3 对称加密用于 HTTPS 连接是否可行 #   如果通信双方都各自持有同一个密钥，且没有别人知道，这两方的通信安全当然是可以保证的。 然而最大的问题就是这个密钥怎么让传输的双方都知晓，同时不被别人知道，如果由服务器生成一个密钥并传输给浏览器，那么在这个传输过程中密钥被别人劫持到手了怎么办，因为之后他就能用密钥解开双方传输的任何内容，所以这么做当然不行。 换种思路，试想一下，如果浏览器内部就预存了网站 A 的密钥，且可以确保除了浏览器和网站 A，不会有任何外人知道该密钥，那理论上用对称加密是可以的，这样浏览器只要预存好世界上所有 HTTPS 网站的密钥就行了，这么做显然不现实，所以我们就需要 非对称加密。  2.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.2-%E5%BA%94%E7%94%A8%E5%B1%82HTTP%E5%92%8CHTTPS/1.2.10-%E5%B8%B8%E8%A7%81%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.2-%E5%BA%94%E7%94%A8%E5%B1%82HTTP%E5%92%8CHTTPS/1.2.10-%E5%B8%B8%E8%A7%81%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB/</guid>
      <description>常见网络攻击 #  常见的网络攻击主要包括跨站脚本攻击（XSS）、注入攻击、模糊测试、零日攻击、路径（目录）遍历攻击、分布式拒绝服务攻击（DDos）、中间人攻击、暴力破解攻击、使用未知代码或第三方代码攻击、网络钓鱼攻击。
1 跨站脚本攻击（XSS） #  1.1 含义 #   跨站脚本攻击，Cross-Site Scripting，简称 XSS，是一种代码注入攻击，攻击者通过在目标网站上注入恶意脚本，使之在用户的浏览器上运行，利用这些恶意脚本，攻击者可获取用户的敏感信息如 Cookie、SessionID 等，进而危害数据安全。 XSS 的本质是恶意代码未经过滤，与正常的代码混在一起，浏览器无法分辨哪些脚本是可信的，导致恶意脚本被执行，而由于直接在用户的终端执行，恶意代码能够直接获取用户的信息，或者利用这些信息冒充用户向网站发起攻击者定义的请求。 在部分情况下，由于输入的限制，注入的恶意脚本比较短，但可以通过引入外部的脚本，并由浏览器执行，来完成比较复杂的攻击策略。 在处理输入时，以下内容都不可信：  来自用户的 UGC 信息。 来自第三方的链接。 URL 参数。 POST 参数。 Refer（可能来自不可信的来源）。 Cookie（可能来自其他子域注入）。    1.2 分类 #  根据攻击的来源，XSS 攻击可分为存储型、反射型和DOM 型三种。
1.2.1 存储型 XSS #   存储型 XSS 的攻击步骤为：  攻击者将恶意代码提交到目标网站的数据库中。 用户打开目标网站时，网站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器。 用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。 恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。   这种攻击常见于带有用户保存数据的网站功能，如论坛发帖、商品评论、用户私信等。  1.2.2 反射型 XSS #   反射型 XSS 的攻击步骤为：  攻击者构造特殊的 URL，其中包含恶意代码。 用户打开带有恶意代码的 URL 时，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器。 用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。 恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。   反射型 XSS 和存储型 XSS 的区别是存储型 XSS 的恶意代码在数据库里，反射型 XSS 的代码在 URL 里。 反射型 XSS 漏洞常见于通过 URL 传递参数的功能，如网站搜索、跳转等，由于需要用户主动打开恶意的 URL 才能生效，攻击者往往会结合多种手段诱导用户点击。 POST 的内容也可以触发反射型 XSS，只不过其触发条件比较苛刻（需要构造表单提交页面，并引导用户点击），所以非常少见。  1.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.2-%E5%BA%94%E7%94%A8%E5%B1%82HTTP%E5%92%8CHTTPS/1.2.11-REST/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/computer-basics/1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.2-%E5%BA%94%E7%94%A8%E5%B1%82HTTP%E5%92%8CHTTPS/1.2.11-REST/</guid>
      <description>REST #  1 含义 #   REST 这个词，是Roy Thomas Fielding 在他 2000 年的博士论文中提到的。 Fielding 将他对互联网软件的架构原则，定义为 REST（Representational State Transfer），即表现层状态转化，如果一个架构符合 REST 原则，就称它为 RESTful 架构。 要理解 RESTful 架构，最好的方法就是去理解 Representational State Transfer 这个词组到底是什么意思，他的每一个词代表了什么涵义，如果我们把这个名称搞懂了，也就不难体会 REST 是一种什么样的设计了。 REST 架构主要有三个关键词，分别是资源（Resources）、表现层（Representation）、状态转化（State Transfer）：  资源：  REST 的名称表现层状态转化中，省略了主语，表现层其实指的是资源的表现层。 所谓资源，就是网络上的一个实体，或者说是网络上的一个具体信息，他可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的存在。 我们可以用一个 URI（统一资源标识符）指向他，每种资源对应一个特定的 URI，要获取这个资源，访问他的 URI 就可以，因此URI 就成了每一个资源的地址或独一无二的标识符。   表现层：  资源是一种信息实体，他可以有多种外在表现形式，我们把资源具体呈现出来的形式，叫做他的表现层。 比如，文本可以用 TXT 格式表现，也可以用 HTML、XML、JSON 格式表现，甚至可以采用二进制格式。 URI 只代表资源的位置，他的具体表现形式，应该在 HTTP 请求的头信息中用 Accept 和 Content-Type 字段指定，这两个字段才是对表现层的描述。   状态转化：  访问一个网站，就代表了客户端和服务器的一个互动过程，在这个过程中，势必涉及到数据和状态的变化。 互联网通信协议HTTP 协议，是一个无状态的协议，这意味着，所有的状态都保存在服务器端，因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生状态转化，而这种转化是建立在表现层之上的，所以就是表现层状态转化。     综合上面的解释，我们总结一下什么是 RESTful 架构：  每一个 URI 代表一种资源。 客户端和服务器之间，传递这种资源的某种表现层。 客户端通过四个 HTTP 动词（GET 获取资源、POST 新建或更新资源、PUT 更新资源、DELETE 删除资源），对服务器端资源进行操作，实现表现层状态转化。    2 特点 #    客户-服务器：</description>
    </item>
    
  </channel>
</rss>
