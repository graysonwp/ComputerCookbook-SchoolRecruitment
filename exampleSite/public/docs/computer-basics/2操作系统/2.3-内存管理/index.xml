<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2.3 内存管理 on Computer Cookbook School Recruitment</title>
    <link>https://books.grayson.top/school-recruitment/docs/computer-basics/2%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.3-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
    <description>Recent content in 2.3 内存管理 on Computer Cookbook School Recruitment</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://books.grayson.top/school-recruitment/docs/computer-basics/2%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.3-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/computer-basics/2%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.3-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/2.3.1-%E5%88%86%E9%A1%B5%E5%92%8C%E5%88%86%E6%AE%B5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/computer-basics/2%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.3-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/2.3.1-%E5%88%86%E9%A1%B5%E5%92%8C%E5%88%86%E6%AE%B5/</guid>
      <description>分页和分段 #  1 分页存储 #   分页存储管理是将一个进程的逻辑地址空间分成若干个大小相等的片，称为页面或页，并为页面加以编号，从0开始，如第0页、第1页等。 同样，也把内存空间分成与页面相同大小的若干个存储块，称为块或页框，也为他们加以编号，如0#块、1#块等。 在为进程分配内存时，以块为单位将进程中的若干页分别装入到多个可以不相邻接的物理块中。 由于进程的最后一页经常装不满一块而形成了不可利用的碎片，称之为页内碎片。  2 分段存储 #   在分段存储管理方式中，作业的地址空间被划分为若干个段，每个段定义了一组逻辑信息，如主程序段、子程序段、数据段、栈段等，每个段都从0开始编址，并采用一段连续的地址空间。 段的长度由相应的逻辑信息组的长度决定，因而各段长度不等。 整个作业的地址空间由于是分成多个段，因而是二维的，其逻辑地址由段号和段内地址所组成。  3 段页式存储 #   用户进程先按段划分，段内再按页划分。 内存划分和分配按页划分。  4 分页存储和分段存储的区别 #   目的不同： 分页的目的是管理内存，用于虚拟内存以获得更大的地址空间；分段的目的是满足用户的需求，使程序和数据可以被划分为逻辑上独立的地址空间。 大小不同： 段的大小不固定，由其所完成的功能决定；页的大小固定，由系统决定。 地址空间维度不同： 分段是二维地址空间（段号+段内偏移），分页是一维地址空间（每个进程一个页表/多级页表，通过一个逻辑地址就能找到对应的物理地址）。 共享： 分段很方便按照逻辑模块实现信息的共享和保护；分页管理不方便按照逻辑模块实现信息的共享和保护。 碎片： 分段没有内碎片，但会产生外碎片；分页没有外碎片，但会产生内碎片。  参考文献 #    分页和分段有什么区别？  分页存储管理和分段存储管理。  操作系统——段式存储管理、段页式存储管理。  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/computer-basics/2%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.3-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/2.3.2-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/computer-basics/2%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.3-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/2.3.2-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</guid>
      <description>虚拟内存 #  1 什么是虚拟内存 #   每个程序都拥有自己的地址空间，这个地址空间被分成大小相等的页，然后被映射到物理内存。 但是不需要所有的页都在物理内存中，当程序引用到不在物理内存中的页时，由操作系统将缺失的部分装入物理内存。 这样，对于程序来说，逻辑上似乎有很大的的内存空间，只是实际上有一部分是存储在磁盘上，因此叫做虚拟内存。  2 如何进行地址空间到物理内存的映射 #   内存管理单元（MMU）管理着逻辑地址到物理地址的转换。 其中的页表存储着页（逻辑地址）和页框（物理地址）的映射表，页表中还包含有效位（是在内存还是在磁盘）、访问位（是否被访问过）、修改位（内存中是否被修改过）、保护位（只读还是可读写）。  3 参考文献 #    什么是虚拟内存？  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/computer-basics/2%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.3-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/2.3.3-%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/computer-basics/2%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.3-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/2.3.3-%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95/</guid>
      <description>页面置换算法 #  1 含义 #   在程序运行过程中，如果要访问的页面不在内存中，就会发生缺页中断从而将该页调入内存中。 此时如果内存中已无空闲空间，系统必须从内存中调出一个页面到磁盘中来腾出空间。 页面置换算法的主要目标是使页面置换频率最低（也可以说缺页率最低）。  2 分类 #  2.1 最佳置换算法（Optimal Replacement Algorithm, OPT） #   最佳置换算法的基本思想是置换以后不需要或者最远的将来才需要的页面，这样可以保证获得最低的缺页率。 但是由于人们目前无法预知进程在内存下的若干页面中哪个是未来最长时间内不再访问的，因而该算法是一种理论上的算法，也是最优的一种算法。  2.2 先进先出法（FIFO） #   先进先出法会优先置换在内存中驻留时间最长的页面。 该算法会产生贝拉迪（Belay）异常，也就是当所分配的物理块数增大而页故障数不减反增的异常现象。 该算法的缺点是将那些经常被访问的页面置换出，从而使缺页率升高。  2.3 第二次机会置换法（Second Chance Replacement, SCR） #   该算法是对 FIFO 算法的改进，每个页面访问 2 次后再淘汰。 具体实现上是设置页面访问位，每次检查队首的页面访问位：  如果该位为 0，则将该页置换出。 如果该位为 1，将该位设置为 0，然后将其移到队尾，看成新装入的页。   该算法的优点是能在一定程度上避免把经常使用的页面置换出去。   2.4 时钟置换法（Clock） #   该算法是对第二次机会置换法的改进。 第二次机会置换法需要在链表中移动页面，而时钟置换法将页面保存在环形链表中，只需要后移队头指针，就相当于是把原来的队头放队尾了。 该算法的优点是避免了移动链表节点的开销。   2.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/computer-basics/2%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.3-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/2.3.4-%E5%B1%80%E9%83%A8%E6%80%A7%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/computer-basics/2%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.3-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/2.3.4-%E5%B1%80%E9%83%A8%E6%80%A7%E5%8E%9F%E7%90%86/</guid>
      <description>局部性原理 #   一个优秀的程序、优美的代码，往往具有良好的局部性。
 1 什么是局部性原理 #  1.1 原理 #   程序局部性原理是指程序在执行时呈现出局部规律，即在一段时间内，整个程序的执行仅限于程序中的某一部分；相应的，执行所访问的存储空间也局限于某个内存区域。 局部性通常由两种形式，分别是时间局部性和空间局部性：  时间局部性： 被引用过一次的存储器位置在未来会被多次引用（通常在循环中）。 空间局部性： 如果一个存储器的位置被引用，那么他附近的位置也会被引用。   局部性可以提高程序的运行效率。  1.2 示例 #  //求数组元素之和，v为数组名，n为数组大小， int sum(int *v, int n) { int i = 0; int sum = 0; for (i=0; i&amp;lt;n; ++i) { sum+=v[i]; } return sum; }   数组在内存中是按照上图的方式连续存放的。 对于sum变量：  具有良好的时间局部性，因为在for循环结束之前，每次执行循环体都有对 sum的访问， 没有空间局部性，因为sum是标量，通过 sum这个地址只能得到一个值。   对于v变量：  具有良好的空间局部性，因为数组v是按照顺序存放在内存中，每次访问 v[i]总是在 v[i-1]的下一个位置。 没有时间局部性，因为在循环体中，每个元素 v[i]只会被访问一次。    2 为什么局部性可以提高程序的运行效率 #  2.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://books.grayson.top/school-recruitment/docs/computer-basics/2%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.3-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/2.3.5-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://books.grayson.top/school-recruitment/docs/computer-basics/2%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.3-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/2.3.5-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/</guid>
      <description>缓冲区溢出 #  1 什么是缓冲区溢出 #   C 语言使用运行时栈来存储过程信息。 每个函数的信息存储在一个栈帧中，包括寄存器、局部变量、参数、返回地址等。 C 语言对数组引用不进行任何边界检查，因此对越界的数组元素的写操作会破坏存储在栈中的状态信息，这种现象称为缓冲区溢出。 缓冲区溢出会破坏程序运行，也可以被用来攻击计算机，如使用一个指向攻击代码的指针覆盖返回地址。  2 缓冲区溢出示例 #  /** * 测试缓冲区溢出 */ void test_cache_overflow() { char str[8]; char input[256]; gets(input); strcpy(str,input); printf(&amp;#34;%s&amp;#34;, str); }   上面这段代码存在一个经典的缓冲区溢出漏洞strcpy。 我们为str分配了8个字节的空间，输入小于等于8个字符，没问题。 但当我们输入超长的数据时，就会出现问题，程序直接终止执行了。  3 防范缓冲区溢出攻击的方法 #  防范缓冲区溢出攻击的方法有三种，分别是随机化、栈保护和限制可执行代码区域。
3.1 随机化 #   使用缓冲区溢出进行攻击，需要知道攻击代码的地址，因此常见的方法有：  栈随机化： 程序开始时在栈上分配一段随机大小的空间。 地址空间布局随机化（Address-Space Layout Randomization, ASLR）： 每次运行时程序的不同部分，包括代码段、数据段、栈、堆等都会加载到内存空间的不同区域。   但是攻击者依然可以使用蛮力克服随机化，这种方式称为“空操作雪橇（Nop Sled）”，即在实际的攻击代码前插入很长的一段 nop指令序列，执行这条指令只会移动到下一条指令。 因此只要攻击者能够猜中这段序列的某个地址，程序就会最终经过这段序列，到达攻击代码。 因此栈随机化和ASLR只能增加攻击一个系统的难度，但不能保证安全。  3.2 栈保护 #   在发生缓冲区溢出，造成任何有害结果之前，尝试检测到他。 常用的栈破坏检测方法是栈保护机制，即在每个函数的栈帧的局部变量和栈状态之间存储一个随机产生的特殊的值，称为金丝雀值（Canary）。 在恢复寄存器状态和函数返回之前，程序检测这个金丝雀值是否被改变了，如果是，那么程序异常终止。  3.</description>
    </item>
    
  </channel>
</rss>
